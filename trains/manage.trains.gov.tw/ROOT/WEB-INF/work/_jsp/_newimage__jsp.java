/*
 * JSP generated by Resin Professional 4.0.53 (built Fri, 16 Jun 2017 02:25:02 PDT)
 */

package _jsp;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.awt.*;
import java.awt.image.*;
import java.util.*;
import javax.imageio.*;

public class _newimage__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;

  Color getRandColor(int fc, int bc) {//\u7d66\u5b9a\u7bc4\u570d\u7372\u5f97\u96a8\u6a5f\u984f\u8272
  		Random random = new Random();
  		if (fc > 255)
  			fc = 255;
  		if (bc > 255)
  			bc = 255;
  		int r = fc + random.nextInt(bc - fc);
  		int g = fc + random.nextInt(bc - fc);
  		int b = fc + random.nextInt(bc - fc);
  		return new Color(r, g, b);
  	}
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("image/jpeg");
    response.setCharacterEncoding("utf-8");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    
	//\u8a2d\u5b9a\u9801\u9762\u4e0d\u7de9\u5b58
	response.setHeader("Pragma", "No-cache");
	response.setHeader("Cache-Control", "no-cache");
	response.setDateHeader("Expires", 0);

	// \u5728\u8a18\u61b6\u9ad4\u4e2d\u5275\u5efa\u5716\u50cf
	int width = 60, height = 20;
	BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

	// \u7372\u53d6\u5716\u5f62\u4e0a\u4e0b\u6587
	Graphics g = image.getGraphics();

	//\u751f\u6210\u96a8\u6a5f\u985e
	Random random = new Random();

	// \u8a2d\u5b9a\u80cc\u666f\u8272
	g.setColor(getRandColor(200, 250));
	g.fillRect(0, 0, width, height);

	//\u8a2d\u5b9a\u5b57\u9ad4
	g.setFont(new Font("Times New Roman", Font.PLAIN, 18));

	// \u96a8\u6a5f\u7522\u751f155\u689d\u5e72\u64fe\u7dda\uff0c\u4f7f\u5716\u50cf\u4e2d\u7684\u8a8d\u8b49\u78bc\u4e0d\u6613\u88ab\u5176\u4ed6\u7a0b\u5f0f\u63a2\u6e2c\u5230
	g.setColor(getRandColor(160, 200));
	for (int i = 0; i < 155; i++) {
		int x = random.nextInt(width);
		int y = random.nextInt(height);
		int xl = random.nextInt(12);
		int yl = random.nextInt(12);
		g.drawLine(x, y, x + xl, y + yl);
	}

	// \u53d6\u96a8\u6a5f\u7522\u751f\u7684\u8a8d\u8b49\u78bc(4\u4f4d\u5143\u6578\u4f4d)
	String sRand = "";
	for (int i = 0; i < 4; i++) {
		String rand = String.valueOf(random.nextInt(10));
		sRand += rand;
		// \u5c07\u8a8d\u8b49\u78bc\u986f\u793a\u5230\u5716\u50cf\u4e2d
		g.setColor(new Color(20 + random.nextInt(110), 20 + random.nextInt(110), 20 + random.nextInt(110)));// \u8abf\u7528\u51fd\u6578\u51fa\u4f86\u7684\u984f\u8272\u76f8\u540c\uff0c\u53ef\u80fd\u662f\u56e0\u70ba\u7a2e\u5b50\u592a\u63a5\u8fd1\uff0c\u6240\u4ee5\u53ea\u80fd\u76f4\u63a5\u751f\u6210
		g.drawString(rand, 13 * i + 6, 16);
	}

	// \u5c07\u8a8d\u8b49\u78bc\u5b58\u5165SESSION
	session.setAttribute("rand", sRand);

	// \u5716\u50cf\u751f\u6548
	g.dispose();

	// \u8f38\u51fa\u5716\u50cf\u5230\u9801\u9762
	ImageIO.write(image, "JPEG", response.getOutputStream());

  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != 4732978526484063000L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("newImage.jsp"), 1729571095302234738L, false);
    _caucho_depends.add(depend);
    loader.addDependency(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\r\n\r\n\r\n\r\n".toCharArray();
  }
}
